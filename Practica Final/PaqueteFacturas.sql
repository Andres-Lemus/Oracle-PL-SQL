create or replace PACKAGE FACTURASP AS
    PROCEDURE ALTA_FACTURA (P_COD_FACTURA NUMBER, P_FECHA DATE, P_DESCRIPCION VARCHAR2);
    PROCEDURE BAJA_FACTURA (P_COD_FACTURA NUMBER);
    PROCEDURE MOD_DESCRI(P_COD_FACTURA NUMBER,P_DESCRIPCION VARCHAR2);
    PROCEDURE MOD_FECHA(P_COD_FACTURA NUMBER, P_FECHA DATE);
    FUNCTION NUM_FACTURAS (FECHA_INICIO DATE,FECHA_FIN DATE) RETURN NUMBER;
    FUNCTION TOTAL_FACTURA(P_COD_FACTURA NUMBER) RETURN NUMBER; 
END FACTURASP;
/
create or replace PACKAGE BODY FACTURASP AS
    
    FUNCTION FACTURA_EXISTE (
        COD NUMBER
    ) RETURN BOOLEAN IS
        CONTAR NUMBER := 0;
        COD_FACT facturas.cod_factura%type;
    BEGIN
       SELECT
            cod_factura INTO COD_FACT FROM FACTURAS WHERE cod_factura=COD;
            RETURN true;
        EXCEPTION 
            WHEN NO_DATA_FOUND THEN
                RETURN false;
            WHEN OTHERS THEN 
                 RAISE_APPLICATION_ERROR(-20000,'ERROR: '|| sqlcode ||' msg: '||SQLERRM);
    END FACTURA_EXISTE;

    PROCEDURE ALTA_FACTURA (P_COD_FACTURA NUMBER, P_FECHA DATE, P_DESCRIPCION VARCHAR2) AS
        ENCONTRADA BOOLEAN;
        FACT_EXISTE EXCEPTION;
    BEGIN
        ENCONTRADA := FACTURA_EXISTE(P_COD_FACTURA);
        IF NOT ENCONTRADA THEN 
            INSERT INTO FACTURAS VALUES (P_COD_FACTURA,P_FECHA, P_DESCRIPCION);
            COMMIT;
        ELSE
            RAISE FACT_EXISTE;
        END IF;

        EXCEPTION
            WHEN FACT_EXISTE THEN
                RAISE_APPLICATION_ERROR(-20001,'El numero de factura ya existe');
            WHEN OTHERS THEN 
               RAISE_APPLICATION_ERROR(-20000,'ERROR: '|| sqlcode ||' msg: '||SQLERRM||' line: '||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
    END ALTA_FACTURA;

    PROCEDURE BAJA_FACTURA (P_COD_FACTURA NUMBER) AS
        FACT_NO_EXISTE EXCEPTION;
        ENCONTRADA BOOLEAN;
    BEGIN
        ENCONTRADA := FACTURA_EXISTE(P_COD_FACTURA);
        IF ENCONTRADA = true THEN
            DELETE FROM LINEAS_FACTURA WHERE cod_factura = P_COD_FACTURA;
            DELETE FROM FACTURAS WHERE cod_factura = P_COD_FACTURA;
            COMMIT;
        ELSE
            RAISE FACT_NO_EXISTE;
        END IF;

        EXCEPTION
            WHEN FACT_NO_EXISTE THEN
               RAISE_APPLICATION_ERROR(-20001,'El numero de factura no existe');
            WHEN OTHERS THEN 
               RAISE_APPLICATION_ERROR(-20000,'ERROR: '|| sqlcode);
    END BAJA_FACTURA;

    PROCEDURE MOD_DESCRI(P_COD_FACTURA NUMBER,P_DESCRIPCION VARCHAR2) AS
        FACT_NO_EXISTE EXCEPTION;
        ENCONTRADA BOOLEAN;
    BEGIN
        ENCONTRADA := FACTURA_EXISTE(P_COD_FACTURA);
        IF ENCONTRADA = true THEN
            UPDATE FACTURAS SET descripcion = P_DESCRIPCION WHERE cod_factura = P_COD_FACTURA;
            COMMIT;
        ELSE
            RAISE FACT_NO_EXISTE;
        END IF;

        EXCEPTION
             WHEN FACT_NO_EXISTE THEN
               RAISE_APPLICATION_ERROR(-20001,'El numero de factura no existe');
            WHEN OTHERS THEN 
               RAISE_APPLICATION_ERROR(-20000,'ERROR: '|| sqlcode);
    END MOD_DESCRI;

    PROCEDURE MOD_FECHA(P_COD_FACTURA NUMBER, P_FECHA DATE) AS
        FACT_NO_EXISTE EXCEPTION;
        ENCONTRADA BOOLEAN;
    BEGIN
        ENCONTRADA := FACTURA_EXISTE(P_COD_FACTURA);
        IF ENCONTRADA = true THEN
            UPDATE facturas SET fecha = P_FECHA WHERE cod_factura = P_COD_FACTURA;
            COMMIT;
        ELSE
            RAISE FACT_NO_EXISTE;
        END IF;

        EXCEPTION
             WHEN FACT_NO_EXISTE THEN
               RAISE_APPLICATION_ERROR(-20001,'El numero de factura no existe');
            WHEN OTHERS THEN 
               RAISE_APPLICATION_ERROR(-20000,'ERROR: '|| sqlcode);
    END MOD_FECHA;

    FUNCTION NUM_FACTURAS (FECHA_INICIO DATE,FECHA_FIN DATE) RETURN NUMBER AS
        CONTAR NUMBER := 0;
    BEGIN
        SELECT COUNT(*) INTO CONTAR FROM FACTURAS WHERE fecha BETWEEN FECHA_INICIO AND FECHA_FIN;
        RETURN CONTAR;
    END NUM_FACTURAS;

    FUNCTION TOTAL_FACTURA(P_COD_FACTURA NUMBER) RETURN NUMBER AS
        TOTAL NUMBER;
    BEGIN
        SELECT SUM(pvp*unidades) INTO TOTAL FROM LINEAS_FACTURA WHERE cod_factura = P_COD_FACTURA;
        RETURN TOTAL;
    END TOTAL_FACTURA;

END FACTURASP;
--SELECT * FROM facturas;
